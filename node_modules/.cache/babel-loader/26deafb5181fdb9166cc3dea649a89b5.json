{"ast":null,"code":"function Grid(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  let wasMultiRow;\n\n  const getSpaceBetween = () => {\n    let spaceBetween = swiper.params.spaceBetween;\n\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n    } else if (typeof spaceBetween === 'string') {\n      spaceBetween = parseFloat(spaceBetween);\n    }\n\n    return spaceBetween;\n  };\n\n  const initSlides = slides => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\n    numFullColumns = Math.floor(slidesLength / rows);\n\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n\n    slidesPerRow = slidesNumberEvenToRows / rows;\n  };\n\n  const unsetSlides = () => {\n    if (swiper.slides) {\n      swiper.slides.forEach(slide => {\n        if (slide.swiperSlideGridSet) {\n          slide.style.height = '';\n          slide.style[swiper.getDirectionLabel('margin-top')] = '';\n        }\n      });\n    }\n  };\n\n  const updateSlide = (i, slide, slides) => {\n    const {\n      slidesPerGroup\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length; // Set slides order\n\n    let newSlideOrderIndex;\n    let column;\n    let row;\n\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n\n    slide.row = row;\n    slide.column = column;\n    slide.style.height = `calc((100% - ${(rows - 1) * spaceBetween}px) / ${rows})`;\n    slide.style[swiper.getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n    slide.swiperSlideGridSet = true;\n  };\n\n  const updateWrapperSize = (slideSize, snapGrid) => {\n    const {\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n\n    if (!swiper.params.cssMode) {\n      swiper.wrapperEl.style[swiper.getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n    }\n\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n\n  const onInit = () => {\n    wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;\n  };\n\n  const onUpdate = () => {\n    const {\n      params,\n      el\n    } = swiper;\n    const isMultiRow = params.grid && params.grid.rows > 1;\n\n    if (wasMultiRow && !isMultiRow) {\n      el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n      numFullColumns = 1;\n      swiper.emitContainerClasses();\n    } else if (!wasMultiRow && isMultiRow) {\n      el.classList.add(`${params.containerModifierClass}grid`);\n\n      if (params.grid.fill === 'column') {\n        el.classList.add(`${params.containerModifierClass}grid-column`);\n      }\n\n      swiper.emitContainerClasses();\n    }\n\n    wasMultiRow = isMultiRow;\n  };\n\n  on('init', onInit);\n  on('update', onUpdate);\n  swiper.grid = {\n    initSlides,\n    unsetSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}\n\nexport { Grid as default };","map":{"version":3,"sources":["/Users/damodhardattareddylikki/Desktop/Damodhar_portfolio/portfolio/node_modules/swiper/modules/grid.mjs"],"names":["Grid","_ref","swiper","extendParams","on","grid","rows","fill","slidesNumberEvenToRows","slidesPerRow","numFullColumns","wasMultiRow","getSpaceBetween","spaceBetween","params","indexOf","parseFloat","replace","size","initSlides","slides","slidesPerView","slidesLength","virtual","enabled","length","Math","floor","ceil","max","unsetSlides","forEach","slide","swiperSlideGridSet","style","height","getDirectionLabel","updateSlide","i","slidesPerGroup","newSlideOrderIndex","column","row","groupIndex","slideIndexInGroup","columnsInGroup","min","order","updateWrapperSize","slideSize","snapGrid","centeredSlides","roundLengths","virtualSize","cssMode","wrapperEl","newSlidesGrid","slidesGridItem","push","splice","onInit","onUpdate","el","isMultiRow","classList","remove","containerModifierClass","emitContainerClasses","add","default"],"mappings":"AAAA,SAASA,IAAT,CAAcC,IAAd,EAAoB;AAClB,MAAI;AACFC,IAAAA,MADE;AAEFC,IAAAA,YAFE;AAGFC,IAAAA;AAHE,MAIAH,IAJJ;AAKAE,EAAAA,YAAY,CAAC;AACXE,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,CADF;AAEJC,MAAAA,IAAI,EAAE;AAFF;AADK,GAAD,CAAZ;AAMA,MAAIC,sBAAJ;AACA,MAAIC,YAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,WAAJ;;AACA,QAAMC,eAAe,GAAG,MAAM;AAC5B,QAAIC,YAAY,GAAGX,MAAM,CAACY,MAAP,CAAcD,YAAjC;;AACA,QAAI,OAAOA,YAAP,KAAwB,QAAxB,IAAoCA,YAAY,CAACE,OAAb,CAAqB,GAArB,KAA6B,CAArE,EAAwE;AACtEF,MAAAA,YAAY,GAAGG,UAAU,CAACH,YAAY,CAACI,OAAb,CAAqB,GAArB,EAA0B,EAA1B,CAAD,CAAV,GAA4C,GAA5C,GAAkDf,MAAM,CAACgB,IAAxE;AACD,KAFD,MAEO,IAAI,OAAOL,YAAP,KAAwB,QAA5B,EAAsC;AAC3CA,MAAAA,YAAY,GAAGG,UAAU,CAACH,YAAD,CAAzB;AACD;;AACD,WAAOA,YAAP;AACD,GARD;;AASA,QAAMM,UAAU,GAAGC,MAAM,IAAI;AAC3B,UAAM;AACJC,MAAAA;AADI,QAEFnB,MAAM,CAACY,MAFX;AAGA,UAAM;AACJR,MAAAA,IADI;AAEJC,MAAAA;AAFI,QAGFL,MAAM,CAACY,MAAP,CAAcT,IAHlB;AAIA,UAAMiB,YAAY,GAAGpB,MAAM,CAACqB,OAAP,IAAkBrB,MAAM,CAACY,MAAP,CAAcS,OAAd,CAAsBC,OAAxC,GAAkDtB,MAAM,CAACqB,OAAP,CAAeH,MAAf,CAAsBK,MAAxE,GAAiFL,MAAM,CAACK,MAA7G;AACAf,IAAAA,cAAc,GAAGgB,IAAI,CAACC,KAAL,CAAWL,YAAY,GAAGhB,IAA1B,CAAjB;;AACA,QAAIoB,IAAI,CAACC,KAAL,CAAWL,YAAY,GAAGhB,IAA1B,MAAoCgB,YAAY,GAAGhB,IAAvD,EAA6D;AAC3DE,MAAAA,sBAAsB,GAAGc,YAAzB;AACD,KAFD,MAEO;AACLd,MAAAA,sBAAsB,GAAGkB,IAAI,CAACE,IAAL,CAAUN,YAAY,GAAGhB,IAAzB,IAAiCA,IAA1D;AACD;;AACD,QAAIe,aAAa,KAAK,MAAlB,IAA4Bd,IAAI,KAAK,KAAzC,EAAgD;AAC9CC,MAAAA,sBAAsB,GAAGkB,IAAI,CAACG,GAAL,CAASrB,sBAAT,EAAiCa,aAAa,GAAGf,IAAjD,CAAzB;AACD;;AACDG,IAAAA,YAAY,GAAGD,sBAAsB,GAAGF,IAAxC;AACD,GAnBD;;AAoBA,QAAMwB,WAAW,GAAG,MAAM;AACxB,QAAI5B,MAAM,CAACkB,MAAX,EAAmB;AACjBlB,MAAAA,MAAM,CAACkB,MAAP,CAAcW,OAAd,CAAsBC,KAAK,IAAI;AAC7B,YAAIA,KAAK,CAACC,kBAAV,EAA8B;AAC5BD,UAAAA,KAAK,CAACE,KAAN,CAAYC,MAAZ,GAAqB,EAArB;AACAH,UAAAA,KAAK,CAACE,KAAN,CAAYhC,MAAM,CAACkC,iBAAP,CAAyB,YAAzB,CAAZ,IAAsD,EAAtD;AACD;AACF,OALD;AAMD;AACF,GATD;;AAUA,QAAMC,WAAW,GAAG,CAACC,CAAD,EAAIN,KAAJ,EAAWZ,MAAX,KAAsB;AACxC,UAAM;AACJmB,MAAAA;AADI,QAEFrC,MAAM,CAACY,MAFX;AAGA,UAAMD,YAAY,GAAGD,eAAe,EAApC;AACA,UAAM;AACJN,MAAAA,IADI;AAEJC,MAAAA;AAFI,QAGFL,MAAM,CAACY,MAAP,CAAcT,IAHlB;AAIA,UAAMiB,YAAY,GAAGpB,MAAM,CAACqB,OAAP,IAAkBrB,MAAM,CAACY,MAAP,CAAcS,OAAd,CAAsBC,OAAxC,GAAkDtB,MAAM,CAACqB,OAAP,CAAeH,MAAf,CAAsBK,MAAxE,GAAiFL,MAAM,CAACK,MAA7G,CATwC,CAUxC;;AACA,QAAIe,kBAAJ;AACA,QAAIC,MAAJ;AACA,QAAIC,GAAJ;;AACA,QAAInC,IAAI,KAAK,KAAT,IAAkBgC,cAAc,GAAG,CAAvC,EAA0C;AACxC,YAAMI,UAAU,GAAGjB,IAAI,CAACC,KAAL,CAAWW,CAAC,IAAIC,cAAc,GAAGjC,IAArB,CAAZ,CAAnB;AACA,YAAMsC,iBAAiB,GAAGN,CAAC,GAAGhC,IAAI,GAAGiC,cAAP,GAAwBI,UAAtD;AACA,YAAME,cAAc,GAAGF,UAAU,KAAK,CAAf,GAAmBJ,cAAnB,GAAoCb,IAAI,CAACoB,GAAL,CAASpB,IAAI,CAACE,IAAL,CAAU,CAACN,YAAY,GAAGqB,UAAU,GAAGrC,IAAb,GAAoBiC,cAApC,IAAsDjC,IAAhE,CAAT,EAAgFiC,cAAhF,CAA3D;AACAG,MAAAA,GAAG,GAAGhB,IAAI,CAACC,KAAL,CAAWiB,iBAAiB,GAAGC,cAA/B,CAAN;AACAJ,MAAAA,MAAM,GAAGG,iBAAiB,GAAGF,GAAG,GAAGG,cAA1B,GAA2CF,UAAU,GAAGJ,cAAjE;AACAC,MAAAA,kBAAkB,GAAGC,MAAM,GAAGC,GAAG,GAAGlC,sBAAN,GAA+BF,IAA7D;AACA0B,MAAAA,KAAK,CAACE,KAAN,CAAYa,KAAZ,GAAoBP,kBAApB;AACD,KARD,MAQO,IAAIjC,IAAI,KAAK,QAAb,EAAuB;AAC5BkC,MAAAA,MAAM,GAAGf,IAAI,CAACC,KAAL,CAAWW,CAAC,GAAGhC,IAAf,CAAT;AACAoC,MAAAA,GAAG,GAAGJ,CAAC,GAAGG,MAAM,GAAGnC,IAAnB;;AACA,UAAImC,MAAM,GAAG/B,cAAT,IAA2B+B,MAAM,KAAK/B,cAAX,IAA6BgC,GAAG,KAAKpC,IAAI,GAAG,CAA3E,EAA8E;AAC5EoC,QAAAA,GAAG,IAAI,CAAP;;AACA,YAAIA,GAAG,IAAIpC,IAAX,EAAiB;AACfoC,UAAAA,GAAG,GAAG,CAAN;AACAD,UAAAA,MAAM,IAAI,CAAV;AACD;AACF;AACF,KAVM,MAUA;AACLC,MAAAA,GAAG,GAAGhB,IAAI,CAACC,KAAL,CAAWW,CAAC,GAAG7B,YAAf,CAAN;AACAgC,MAAAA,MAAM,GAAGH,CAAC,GAAGI,GAAG,GAAGjC,YAAnB;AACD;;AACDuB,IAAAA,KAAK,CAACU,GAAN,GAAYA,GAAZ;AACAV,IAAAA,KAAK,CAACS,MAAN,GAAeA,MAAf;AACAT,IAAAA,KAAK,CAACE,KAAN,CAAYC,MAAZ,GAAsB,gBAAe,CAAC7B,IAAI,GAAG,CAAR,IAAaO,YAAa,SAAQP,IAAK,GAA5E;AACA0B,IAAAA,KAAK,CAACE,KAAN,CAAYhC,MAAM,CAACkC,iBAAP,CAAyB,YAAzB,CAAZ,IAAsDM,GAAG,KAAK,CAAR,GAAY7B,YAAY,IAAK,GAAEA,YAAa,IAA5C,GAAkD,EAAxG;AACAmB,IAAAA,KAAK,CAACC,kBAAN,GAA2B,IAA3B;AACD,GAzCD;;AA0CA,QAAMe,iBAAiB,GAAG,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AACjD,UAAM;AACJC,MAAAA,cADI;AAEJC,MAAAA;AAFI,QAGFlD,MAAM,CAACY,MAHX;AAIA,UAAMD,YAAY,GAAGD,eAAe,EAApC;AACA,UAAM;AACJN,MAAAA;AADI,QAEFJ,MAAM,CAACY,MAAP,CAAcT,IAFlB;AAGAH,IAAAA,MAAM,CAACmD,WAAP,GAAqB,CAACJ,SAAS,GAAGpC,YAAb,IAA6BL,sBAAlD;AACAN,IAAAA,MAAM,CAACmD,WAAP,GAAqB3B,IAAI,CAACE,IAAL,CAAU1B,MAAM,CAACmD,WAAP,GAAqB/C,IAA/B,IAAuCO,YAA5D;;AACA,QAAI,CAACX,MAAM,CAACY,MAAP,CAAcwC,OAAnB,EAA4B;AAC1BpD,MAAAA,MAAM,CAACqD,SAAP,CAAiBrB,KAAjB,CAAuBhC,MAAM,CAACkC,iBAAP,CAAyB,OAAzB,CAAvB,IAA6D,GAAElC,MAAM,CAACmD,WAAP,GAAqBxC,YAAa,IAAjG;AACD;;AACD,QAAIsC,cAAJ,EAAoB;AAClB,YAAMK,aAAa,GAAG,EAAtB;;AACA,WAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,QAAQ,CAACzB,MAA7B,EAAqCa,CAAC,IAAI,CAA1C,EAA6C;AAC3C,YAAImB,cAAc,GAAGP,QAAQ,CAACZ,CAAD,CAA7B;AACA,YAAIc,YAAJ,EAAkBK,cAAc,GAAG/B,IAAI,CAACC,KAAL,CAAW8B,cAAX,CAAjB;AAClB,YAAIP,QAAQ,CAACZ,CAAD,CAAR,GAAcpC,MAAM,CAACmD,WAAP,GAAqBH,QAAQ,CAAC,CAAD,CAA/C,EAAoDM,aAAa,CAACE,IAAd,CAAmBD,cAAnB;AACrD;;AACDP,MAAAA,QAAQ,CAACS,MAAT,CAAgB,CAAhB,EAAmBT,QAAQ,CAACzB,MAA5B;AACAyB,MAAAA,QAAQ,CAACQ,IAAT,CAAc,GAAGF,aAAjB;AACD;AACF,GAxBD;;AAyBA,QAAMI,MAAM,GAAG,MAAM;AACnBjD,IAAAA,WAAW,GAAGT,MAAM,CAACY,MAAP,CAAcT,IAAd,IAAsBH,MAAM,CAACY,MAAP,CAAcT,IAAd,CAAmBC,IAAnB,GAA0B,CAA9D;AACD,GAFD;;AAGA,QAAMuD,QAAQ,GAAG,MAAM;AACrB,UAAM;AACJ/C,MAAAA,MADI;AAEJgD,MAAAA;AAFI,QAGF5D,MAHJ;AAIA,UAAM6D,UAAU,GAAGjD,MAAM,CAACT,IAAP,IAAeS,MAAM,CAACT,IAAP,CAAYC,IAAZ,GAAmB,CAArD;;AACA,QAAIK,WAAW,IAAI,CAACoD,UAApB,EAAgC;AAC9BD,MAAAA,EAAE,CAACE,SAAH,CAAaC,MAAb,CAAqB,GAAEnD,MAAM,CAACoD,sBAAuB,MAArD,EAA6D,GAAEpD,MAAM,CAACoD,sBAAuB,aAA7F;AACAxD,MAAAA,cAAc,GAAG,CAAjB;AACAR,MAAAA,MAAM,CAACiE,oBAAP;AACD,KAJD,MAIO,IAAI,CAACxD,WAAD,IAAgBoD,UAApB,EAAgC;AACrCD,MAAAA,EAAE,CAACE,SAAH,CAAaI,GAAb,CAAkB,GAAEtD,MAAM,CAACoD,sBAAuB,MAAlD;;AACA,UAAIpD,MAAM,CAACT,IAAP,CAAYE,IAAZ,KAAqB,QAAzB,EAAmC;AACjCuD,QAAAA,EAAE,CAACE,SAAH,CAAaI,GAAb,CAAkB,GAAEtD,MAAM,CAACoD,sBAAuB,aAAlD;AACD;;AACDhE,MAAAA,MAAM,CAACiE,oBAAP;AACD;;AACDxD,IAAAA,WAAW,GAAGoD,UAAd;AACD,GAlBD;;AAmBA3D,EAAAA,EAAE,CAAC,MAAD,EAASwD,MAAT,CAAF;AACAxD,EAAAA,EAAE,CAAC,QAAD,EAAWyD,QAAX,CAAF;AACA3D,EAAAA,MAAM,CAACG,IAAP,GAAc;AACZc,IAAAA,UADY;AAEZW,IAAAA,WAFY;AAGZO,IAAAA,WAHY;AAIZW,IAAAA;AAJY,GAAd;AAMD;;AAED,SAAShD,IAAI,IAAIqE,OAAjB","sourcesContent":["function Grid(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  let wasMultiRow;\n  const getSpaceBetween = () => {\n    let spaceBetween = swiper.params.spaceBetween;\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n    } else if (typeof spaceBetween === 'string') {\n      spaceBetween = parseFloat(spaceBetween);\n    }\n    return spaceBetween;\n  };\n  const initSlides = slides => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n    slidesPerRow = slidesNumberEvenToRows / rows;\n  };\n  const unsetSlides = () => {\n    if (swiper.slides) {\n      swiper.slides.forEach(slide => {\n        if (slide.swiperSlideGridSet) {\n          slide.style.height = '';\n          slide.style[swiper.getDirectionLabel('margin-top')] = '';\n        }\n      });\n    }\n  };\n  const updateSlide = (i, slide, slides) => {\n    const {\n      slidesPerGroup\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\n    // Set slides order\n    let newSlideOrderIndex;\n    let column;\n    let row;\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.row = row;\n    slide.column = column;\n    slide.style.height = `calc((100% - ${(rows - 1) * spaceBetween}px) / ${rows})`;\n    slide.style[swiper.getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n    slide.swiperSlideGridSet = true;\n  };\n  const updateWrapperSize = (slideSize, snapGrid) => {\n    const {\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    if (!swiper.params.cssMode) {\n      swiper.wrapperEl.style[swiper.getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n    }\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n  const onInit = () => {\n    wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;\n  };\n  const onUpdate = () => {\n    const {\n      params,\n      el\n    } = swiper;\n    const isMultiRow = params.grid && params.grid.rows > 1;\n    if (wasMultiRow && !isMultiRow) {\n      el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n      numFullColumns = 1;\n      swiper.emitContainerClasses();\n    } else if (!wasMultiRow && isMultiRow) {\n      el.classList.add(`${params.containerModifierClass}grid`);\n      if (params.grid.fill === 'column') {\n        el.classList.add(`${params.containerModifierClass}grid-column`);\n      }\n      swiper.emitContainerClasses();\n    }\n    wasMultiRow = isMultiRow;\n  };\n  on('init', onInit);\n  on('update', onUpdate);\n  swiper.grid = {\n    initSlides,\n    unsetSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}\n\nexport { Grid as default };\n"]},"metadata":{},"sourceType":"module"}