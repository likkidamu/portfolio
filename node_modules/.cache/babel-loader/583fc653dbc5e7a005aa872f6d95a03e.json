{"ast":null,"code":"import { calcGeneratorDuration, maxGeneratorDuration } from '../../animation/generators/utils/calc-duration.mjs';\nimport { millisecondsToSeconds } from '../../utils/time-conversion.mjs';\n/**\n * Create a progress => progress easing function from a generator.\n */\n\nfunction createGeneratorEasing(options) {\n  let scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  let createGenerator = arguments.length > 2 ? arguments[2] : undefined;\n  const generator = createGenerator({ ...options,\n    keyframes: [0, scale]\n  });\n  const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);\n  return {\n    type: \"keyframes\",\n    ease: progress => generator.next(duration * progress).value / scale,\n    duration: millisecondsToSeconds(duration)\n  };\n}\n\nexport { createGeneratorEasing };","map":{"version":3,"sources":["/Users/damodhardattareddylikki/Desktop/Damodhar_portfolio/portfolio/node_modules/framer-motion/dist/es/easing/utils/create-generator-easing.mjs"],"names":["calcGeneratorDuration","maxGeneratorDuration","millisecondsToSeconds","createGeneratorEasing","options","scale","createGenerator","generator","keyframes","duration","Math","min","type","ease","progress","next","value"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,oBAAhC,QAA4D,oDAA5D;AACA,SAASC,qBAAT,QAAsC,iCAAtC;AAEA;AACA;AACA;;AACA,SAASC,qBAAT,CAA+BC,OAA/B,EAAsE;AAAA,MAA9BC,KAA8B,uEAAtB,GAAsB;AAAA,MAAjBC,eAAiB;AAClE,QAAMC,SAAS,GAAGD,eAAe,CAAC,EAAE,GAAGF,OAAL;AAAcI,IAAAA,SAAS,EAAE,CAAC,CAAD,EAAIH,KAAJ;AAAzB,GAAD,CAAjC;AACA,QAAMI,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASX,qBAAqB,CAACO,SAAD,CAA9B,EAA2CN,oBAA3C,CAAjB;AACA,SAAO;AACHW,IAAAA,IAAI,EAAE,WADH;AAEHC,IAAAA,IAAI,EAAGC,QAAD,IAAcP,SAAS,CAACQ,IAAV,CAAeN,QAAQ,GAAGK,QAA1B,EAAoCE,KAApC,GAA4CX,KAF7D;AAGHI,IAAAA,QAAQ,EAAEP,qBAAqB,CAACO,QAAD;AAH5B,GAAP;AAKH;;AAED,SAASN,qBAAT","sourcesContent":["import { calcGeneratorDuration, maxGeneratorDuration } from '../../animation/generators/utils/calc-duration.mjs';\nimport { millisecondsToSeconds } from '../../utils/time-conversion.mjs';\n\n/**\n * Create a progress => progress easing function from a generator.\n */\nfunction createGeneratorEasing(options, scale = 100, createGenerator) {\n    const generator = createGenerator({ ...options, keyframes: [0, scale] });\n    const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);\n    return {\n        type: \"keyframes\",\n        ease: (progress) => generator.next(duration * progress).value / scale,\n        duration: millisecondsToSeconds(duration),\n    };\n}\n\nexport { createGeneratorEasing };\n"]},"metadata":{},"sourceType":"module"}