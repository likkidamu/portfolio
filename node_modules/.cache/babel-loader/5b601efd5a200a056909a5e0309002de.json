{"ast":null,"code":"function Grid(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  let wasMultiRow;\n\n  const getSpaceBetween = () => {\n    let spaceBetween = swiper.params.spaceBetween;\n\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n    } else if (typeof spaceBetween === 'string') {\n      spaceBetween = parseFloat(spaceBetween);\n    }\n\n    return spaceBetween;\n  };\n\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    numFullColumns = Math.floor(slidesLength / rows);\n\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n\n    slidesPerRow = slidesNumberEvenToRows / rows;\n  };\n\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows,\n      fill\n    } = swiper.params.grid; // Set slides order\n\n    let newSlideOrderIndex;\n    let column;\n    let row;\n\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n\n    slide.row = row;\n    slide.column = column;\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n  };\n\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n\n  const onInit = () => {\n    wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;\n  };\n\n  const onUpdate = () => {\n    const {\n      params,\n      el\n    } = swiper;\n    const isMultiRow = params.grid && params.grid.rows > 1;\n\n    if (wasMultiRow && !isMultiRow) {\n      el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n      numFullColumns = 1;\n      swiper.emitContainerClasses();\n    } else if (!wasMultiRow && isMultiRow) {\n      el.classList.add(`${params.containerModifierClass}grid`);\n\n      if (params.grid.fill === 'column') {\n        el.classList.add(`${params.containerModifierClass}grid-column`);\n      }\n\n      swiper.emitContainerClasses();\n    }\n\n    wasMultiRow = isMultiRow;\n  };\n\n  on('init', onInit);\n  on('update', onUpdate);\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}\n\nexport { Grid as default };","map":{"version":3,"sources":["/Users/damodhardattareddylikki/Desktop/Damodhar_portfolio/portfolio/node_modules/swiper/modules/grid.mjs"],"names":["Grid","_ref","swiper","extendParams","on","grid","rows","fill","slidesNumberEvenToRows","slidesPerRow","numFullColumns","wasMultiRow","getSpaceBetween","spaceBetween","params","indexOf","parseFloat","replace","size","initSlides","slidesLength","slidesPerView","Math","floor","ceil","max","updateSlide","i","slide","getDirectionLabel","slidesPerGroup","newSlideOrderIndex","column","row","groupIndex","slideIndexInGroup","columnsInGroup","min","style","order","updateWrapperSize","slideSize","snapGrid","centeredSlides","roundLengths","virtualSize","wrapperEl","newSlidesGrid","length","slidesGridItem","push","splice","onInit","onUpdate","el","isMultiRow","classList","remove","containerModifierClass","emitContainerClasses","add","default"],"mappings":"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","sourcesContent":["function Grid(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  let wasMultiRow;\n  const getSpaceBetween = () => {\n    let spaceBetween = swiper.params.spaceBetween;\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n    } else if (typeof spaceBetween === 'string') {\n      spaceBetween = parseFloat(spaceBetween);\n    }\n    return spaceBetween;\n  };\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n    slidesPerRow = slidesNumberEvenToRows / rows;\n  };\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    // Set slides order\n    let newSlideOrderIndex;\n    let column;\n    let row;\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.row = row;\n    slide.column = column;\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n  };\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n  const onInit = () => {\n    wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;\n  };\n  const onUpdate = () => {\n    const {\n      params,\n      el\n    } = swiper;\n    const isMultiRow = params.grid && params.grid.rows > 1;\n    if (wasMultiRow && !isMultiRow) {\n      el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n      numFullColumns = 1;\n      swiper.emitContainerClasses();\n    } else if (!wasMultiRow && isMultiRow) {\n      el.classList.add(`${params.containerModifierClass}grid`);\n      if (params.grid.fill === 'column') {\n        el.classList.add(`${params.containerModifierClass}grid-column`);\n      }\n      swiper.emitContainerClasses();\n    }\n    wasMultiRow = isMultiRow;\n  };\n  on('init', onInit);\n  on('update', onUpdate);\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}\n\nexport { Grid as default };\n"]},"metadata":{},"sourceType":"module"}