{"ast":null,"code":"import { createGeneratorEasing } from '../../easing/utils/create-generator-easing.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { fillOffset } from '../../utils/offsets/fill.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { resolveSubjects } from '../animate/resolve-subjects.mjs';\nimport { isGenerator } from '../generators/utils/is-generator.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { compareByTime } from './utils/sort.mjs';\nconst defaultSegmentEasing = \"easeInOut\";\n\nfunction createAnimationsFromSequence(sequence) {\n  let {\n    defaultTransition = {},\n    ...sequenceTransition\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let scope = arguments.length > 2 ? arguments[2] : undefined;\n  let generators = arguments.length > 3 ? arguments[3] : undefined;\n  const defaultDuration = defaultTransition.duration || 0.3;\n  const animationDefinitions = new Map();\n  const sequences = new Map();\n  const elementCache = {};\n  const timeLabels = new Map();\n  let prevTime = 0;\n  let currentTime = 0;\n  let totalDuration = 0;\n  /**\n   * Build the timeline by mapping over the sequence array and converting\n   * the definitions into keyframes and offsets with absolute time values.\n   * These will later get converted into relative offsets in a second pass.\n   */\n\n  for (let i = 0; i < sequence.length; i++) {\n    const segment = sequence[i];\n    /**\n     * If this is a timeline label, mark it and skip the rest of this iteration.\n     */\n\n    if (typeof segment === \"string\") {\n      timeLabels.set(segment, currentTime);\n      continue;\n    } else if (!Array.isArray(segment)) {\n      timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n      continue;\n    }\n\n    let [subject, keyframes, transition = {}] = segment;\n    /**\n     * If a relative or absolute time value has been specified we need to resolve\n     * it in relation to the currentTime.\n     */\n\n    if (transition.at !== undefined) {\n      currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n    }\n    /**\n     * Keep track of the maximum duration in this definition. This will be\n     * applied to currentTime once the definition has been parsed.\n     */\n\n\n    let maxDuration = 0;\n\n    const resolveValueSequence = function (valueKeyframes, valueTransition, valueSequence) {\n      let elementIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      let numSubjects = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n      const {\n        delay = 0,\n        times = defaultOffset(valueKeyframesAsList),\n        type = \"keyframes\",\n        ...remainingTransition\n      } = valueTransition;\n      let {\n        ease = defaultTransition.ease || \"easeOut\",\n        duration\n      } = valueTransition;\n      /**\n       * Resolve stagger() if defined.\n       */\n\n      const calculatedDelay = typeof delay === \"function\" ? delay(elementIndex, numSubjects) : delay;\n      /**\n       * If this animation should and can use a spring, generate a spring easing function.\n       */\n\n      const numKeyframes = valueKeyframesAsList.length;\n      const createGenerator = isGenerator(type) ? type : generators === null || generators === void 0 ? void 0 : generators[type];\n\n      if (numKeyframes <= 2 && createGenerator) {\n        /**\n         * As we're creating an easing function from a spring,\n         * ideally we want to generate it using the real distance\n         * between the two keyframes. However this isn't always\n         * possible - in these situations we use 0-100.\n         */\n        let absoluteDelta = 100;\n\n        if (numKeyframes === 2 && isNumberKeyframesArray(valueKeyframesAsList)) {\n          const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];\n          absoluteDelta = Math.abs(delta);\n        }\n\n        const springTransition = { ...remainingTransition\n        };\n\n        if (duration !== undefined) {\n          springTransition.duration = secondsToMilliseconds(duration);\n        }\n\n        const springEasing = createGeneratorEasing(springTransition, absoluteDelta, createGenerator);\n        ease = springEasing.ease;\n        duration = springEasing.duration;\n      }\n\n      duration !== null && duration !== void 0 ? duration : duration = defaultDuration;\n      const startTime = currentTime + calculatedDelay;\n      const targetTime = startTime + duration;\n      /**\n       * If there's only one time offset of 0, fill in a second with length 1\n       */\n\n      if (times.length === 1 && times[0] === 0) {\n        times[1] = 1;\n      }\n      /**\n       * Fill out if offset if fewer offsets than keyframes\n       */\n\n\n      const remainder = times.length - valueKeyframesAsList.length;\n      remainder > 0 && fillOffset(times, remainder);\n      /**\n       * If only one value has been set, ie [1], push a null to the start of\n       * the keyframe array. This will let us mark a keyframe at this point\n       * that will later be hydrated with the previous value.\n       */\n\n      valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null);\n      /**\n       * Add keyframes, mapping offsets to absolute time.\n       */\n\n      addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n      maxDuration = Math.max(calculatedDelay + duration, maxDuration);\n      totalDuration = Math.max(targetTime, totalDuration);\n    };\n\n    if (isMotionValue(subject)) {\n      const subjectSequence = getSubjectSequence(subject, sequences);\n      resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n    } else {\n      const subjects = resolveSubjects(subject, keyframes, scope, elementCache);\n      const numSubjects = subjects.length;\n      /**\n       * For every element in this segment, process the defined values.\n       */\n\n      for (let subjectIndex = 0; subjectIndex < numSubjects; subjectIndex++) {\n        /**\n         * Cast necessary, but we know these are of this type\n         */\n        keyframes = keyframes;\n        transition = transition;\n        const thisSubject = subjects[subjectIndex];\n        const subjectSequence = getSubjectSequence(thisSubject, sequences);\n\n        for (const key in keyframes) {\n          resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), subjectIndex, numSubjects);\n        }\n      }\n    }\n\n    prevTime = currentTime;\n    currentTime += maxDuration;\n  }\n  /**\n   * For every element and value combination create a new animation.\n   */\n\n\n  sequences.forEach((valueSequences, element) => {\n    for (const key in valueSequences) {\n      const valueSequence = valueSequences[key];\n      /**\n       * Arrange all the keyframes in ascending time order.\n       */\n\n      valueSequence.sort(compareByTime);\n      const keyframes = [];\n      const valueOffset = [];\n      const valueEasing = [];\n      /**\n       * For each keyframe, translate absolute times into\n       * relative offsets based on the total duration of the timeline.\n       */\n\n      for (let i = 0; i < valueSequence.length; i++) {\n        const {\n          at,\n          value,\n          easing\n        } = valueSequence[i];\n        keyframes.push(value);\n        valueOffset.push(progress(0, totalDuration, at));\n        valueEasing.push(easing || \"easeOut\");\n      }\n      /**\n       * If the first keyframe doesn't land on offset: 0\n       * provide one by duplicating the initial keyframe. This ensures\n       * it snaps to the first keyframe when the animation starts.\n       */\n\n\n      if (valueOffset[0] !== 0) {\n        valueOffset.unshift(0);\n        keyframes.unshift(keyframes[0]);\n        valueEasing.unshift(defaultSegmentEasing);\n      }\n      /**\n       * If the last keyframe doesn't land on offset: 1\n       * provide one with a null wildcard value. This will ensure it\n       * stays static until the end of the animation.\n       */\n\n\n      if (valueOffset[valueOffset.length - 1] !== 1) {\n        valueOffset.push(1);\n        keyframes.push(null);\n      }\n\n      if (!animationDefinitions.has(element)) {\n        animationDefinitions.set(element, {\n          keyframes: {},\n          transition: {}\n        });\n      }\n\n      const definition = animationDefinitions.get(element);\n      definition.keyframes[key] = keyframes;\n      definition.transition[key] = { ...defaultTransition,\n        duration: totalDuration,\n        ease: valueEasing,\n        times: valueOffset,\n        ...sequenceTransition\n      };\n    }\n  });\n  return animationDefinitions;\n}\n\nfunction getSubjectSequence(subject, sequences) {\n  !sequences.has(subject) && sequences.set(subject, {});\n  return sequences.get(subject);\n}\n\nfunction getValueSequence(name, sequences) {\n  if (!sequences[name]) sequences[name] = [];\n  return sequences[name];\n}\n\nfunction keyframesAsList(keyframes) {\n  return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\n\nfunction getValueTransition(transition, key) {\n  return transition && transition[key] ? { ...transition,\n    ...transition[key]\n  } : { ...transition\n  };\n}\n\nconst isNumber = keyframe => typeof keyframe === \"number\";\n\nconst isNumberKeyframesArray = keyframes => keyframes.every(isNumber);\n\nexport { createAnimationsFromSequence, getValueTransition };","map":{"version":3,"sources":["/Users/damodhardattareddylikki/Desktop/Damodhar_portfolio/portfolio/node_modules/framer-motion/dist/es/animation/sequence/create.mjs"],"names":["createGeneratorEasing","defaultOffset","fillOffset","progress","secondsToMilliseconds","isMotionValue","resolveSubjects","isGenerator","calcNextTime","addKeyframes","compareByTime","defaultSegmentEasing","createAnimationsFromSequence","sequence","defaultTransition","sequenceTransition","scope","generators","defaultDuration","duration","animationDefinitions","Map","sequences","elementCache","timeLabels","prevTime","currentTime","totalDuration","i","length","segment","set","Array","isArray","name","at","subject","keyframes","transition","undefined","maxDuration","resolveValueSequence","valueKeyframes","valueTransition","valueSequence","elementIndex","numSubjects","valueKeyframesAsList","keyframesAsList","delay","times","type","remainingTransition","ease","calculatedDelay","numKeyframes","createGenerator","absoluteDelta","isNumberKeyframesArray","delta","Math","abs","springTransition","springEasing","startTime","targetTime","remainder","unshift","max","subjectSequence","getSubjectSequence","getValueSequence","subjects","subjectIndex","thisSubject","key","getValueTransition","forEach","valueSequences","element","sort","valueOffset","valueEasing","value","easing","push","has","definition","get","isNumber","keyframe","every"],"mappings":"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","sourcesContent":["import { createGeneratorEasing } from '../../easing/utils/create-generator-easing.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { fillOffset } from '../../utils/offsets/fill.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { resolveSubjects } from '../animate/resolve-subjects.mjs';\nimport { isGenerator } from '../generators/utils/is-generator.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { compareByTime } from './utils/sort.mjs';\n\nconst defaultSegmentEasing = \"easeInOut\";\nfunction createAnimationsFromSequence(sequence, { defaultTransition = {}, ...sequenceTransition } = {}, scope, generators) {\n    const defaultDuration = defaultTransition.duration || 0.3;\n    const animationDefinitions = new Map();\n    const sequences = new Map();\n    const elementCache = {};\n    const timeLabels = new Map();\n    let prevTime = 0;\n    let currentTime = 0;\n    let totalDuration = 0;\n    /**\n     * Build the timeline by mapping over the sequence array and converting\n     * the definitions into keyframes and offsets with absolute time values.\n     * These will later get converted into relative offsets in a second pass.\n     */\n    for (let i = 0; i < sequence.length; i++) {\n        const segment = sequence[i];\n        /**\n         * If this is a timeline label, mark it and skip the rest of this iteration.\n         */\n        if (typeof segment === \"string\") {\n            timeLabels.set(segment, currentTime);\n            continue;\n        }\n        else if (!Array.isArray(segment)) {\n            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n            continue;\n        }\n        let [subject, keyframes, transition = {}] = segment;\n        /**\n         * If a relative or absolute time value has been specified we need to resolve\n         * it in relation to the currentTime.\n         */\n        if (transition.at !== undefined) {\n            currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n        }\n        /**\n         * Keep track of the maximum duration in this definition. This will be\n         * applied to currentTime once the definition has been parsed.\n         */\n        let maxDuration = 0;\n        const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numSubjects = 0) => {\n            const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n            const { delay = 0, times = defaultOffset(valueKeyframesAsList), type = \"keyframes\", ...remainingTransition } = valueTransition;\n            let { ease = defaultTransition.ease || \"easeOut\", duration } = valueTransition;\n            /**\n             * Resolve stagger() if defined.\n             */\n            const calculatedDelay = typeof delay === \"function\"\n                ? delay(elementIndex, numSubjects)\n                : delay;\n            /**\n             * If this animation should and can use a spring, generate a spring easing function.\n             */\n            const numKeyframes = valueKeyframesAsList.length;\n            const createGenerator = isGenerator(type)\n                ? type\n                : generators === null || generators === void 0 ? void 0 : generators[type];\n            if (numKeyframes <= 2 && createGenerator) {\n                /**\n                 * As we're creating an easing function from a spring,\n                 * ideally we want to generate it using the real distance\n                 * between the two keyframes. However this isn't always\n                 * possible - in these situations we use 0-100.\n                 */\n                let absoluteDelta = 100;\n                if (numKeyframes === 2 &&\n                    isNumberKeyframesArray(valueKeyframesAsList)) {\n                    const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];\n                    absoluteDelta = Math.abs(delta);\n                }\n                const springTransition = { ...remainingTransition };\n                if (duration !== undefined) {\n                    springTransition.duration = secondsToMilliseconds(duration);\n                }\n                const springEasing = createGeneratorEasing(springTransition, absoluteDelta, createGenerator);\n                ease = springEasing.ease;\n                duration = springEasing.duration;\n            }\n            duration !== null && duration !== void 0 ? duration : (duration = defaultDuration);\n            const startTime = currentTime + calculatedDelay;\n            const targetTime = startTime + duration;\n            /**\n             * If there's only one time offset of 0, fill in a second with length 1\n             */\n            if (times.length === 1 && times[0] === 0) {\n                times[1] = 1;\n            }\n            /**\n             * Fill out if offset if fewer offsets than keyframes\n             */\n            const remainder = times.length - valueKeyframesAsList.length;\n            remainder > 0 && fillOffset(times, remainder);\n            /**\n             * If only one value has been set, ie [1], push a null to the start of\n             * the keyframe array. This will let us mark a keyframe at this point\n             * that will later be hydrated with the previous value.\n             */\n            valueKeyframesAsList.length === 1 &&\n                valueKeyframesAsList.unshift(null);\n            /**\n             * Add keyframes, mapping offsets to absolute time.\n             */\n            addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n            maxDuration = Math.max(calculatedDelay + duration, maxDuration);\n            totalDuration = Math.max(targetTime, totalDuration);\n        };\n        if (isMotionValue(subject)) {\n            const subjectSequence = getSubjectSequence(subject, sequences);\n            resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n        }\n        else {\n            const subjects = resolveSubjects(subject, keyframes, scope, elementCache);\n            const numSubjects = subjects.length;\n            /**\n             * For every element in this segment, process the defined values.\n             */\n            for (let subjectIndex = 0; subjectIndex < numSubjects; subjectIndex++) {\n                /**\n                 * Cast necessary, but we know these are of this type\n                 */\n                keyframes = keyframes;\n                transition = transition;\n                const thisSubject = subjects[subjectIndex];\n                const subjectSequence = getSubjectSequence(thisSubject, sequences);\n                for (const key in keyframes) {\n                    resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), subjectIndex, numSubjects);\n                }\n            }\n        }\n        prevTime = currentTime;\n        currentTime += maxDuration;\n    }\n    /**\n     * For every element and value combination create a new animation.\n     */\n    sequences.forEach((valueSequences, element) => {\n        for (const key in valueSequences) {\n            const valueSequence = valueSequences[key];\n            /**\n             * Arrange all the keyframes in ascending time order.\n             */\n            valueSequence.sort(compareByTime);\n            const keyframes = [];\n            const valueOffset = [];\n            const valueEasing = [];\n            /**\n             * For each keyframe, translate absolute times into\n             * relative offsets based on the total duration of the timeline.\n             */\n            for (let i = 0; i < valueSequence.length; i++) {\n                const { at, value, easing } = valueSequence[i];\n                keyframes.push(value);\n                valueOffset.push(progress(0, totalDuration, at));\n                valueEasing.push(easing || \"easeOut\");\n            }\n            /**\n             * If the first keyframe doesn't land on offset: 0\n             * provide one by duplicating the initial keyframe. This ensures\n             * it snaps to the first keyframe when the animation starts.\n             */\n            if (valueOffset[0] !== 0) {\n                valueOffset.unshift(0);\n                keyframes.unshift(keyframes[0]);\n                valueEasing.unshift(defaultSegmentEasing);\n            }\n            /**\n             * If the last keyframe doesn't land on offset: 1\n             * provide one with a null wildcard value. This will ensure it\n             * stays static until the end of the animation.\n             */\n            if (valueOffset[valueOffset.length - 1] !== 1) {\n                valueOffset.push(1);\n                keyframes.push(null);\n            }\n            if (!animationDefinitions.has(element)) {\n                animationDefinitions.set(element, {\n                    keyframes: {},\n                    transition: {},\n                });\n            }\n            const definition = animationDefinitions.get(element);\n            definition.keyframes[key] = keyframes;\n            definition.transition[key] = {\n                ...defaultTransition,\n                duration: totalDuration,\n                ease: valueEasing,\n                times: valueOffset,\n                ...sequenceTransition,\n            };\n        }\n    });\n    return animationDefinitions;\n}\nfunction getSubjectSequence(subject, sequences) {\n    !sequences.has(subject) && sequences.set(subject, {});\n    return sequences.get(subject);\n}\nfunction getValueSequence(name, sequences) {\n    if (!sequences[name])\n        sequences[name] = [];\n    return sequences[name];\n}\nfunction keyframesAsList(keyframes) {\n    return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\nfunction getValueTransition(transition, key) {\n    return transition && transition[key]\n        ? {\n            ...transition,\n            ...transition[key],\n        }\n        : { ...transition };\n}\nconst isNumber = (keyframe) => typeof keyframe === \"number\";\nconst isNumberKeyframesArray = (keyframes) => keyframes.every(isNumber);\n\nexport { createAnimationsFromSequence, getValueTransition };\n"]},"metadata":{},"sourceType":"module"}