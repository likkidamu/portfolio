{"ast":null,"code":"import { g as getDocument } from '../shared/ssr-window.esm.mjs';\n/* eslint no-underscore-dangle: \"off\" */\n\n/* eslint no-use-before-define: \"off\" */\n\nfunction Autoplay(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit,\n    params\n  } = _ref;\n  swiper.autoplay = {\n    running: false,\n    paused: false,\n    timeLeft: 0\n  };\n  extendParams({\n    autoplay: {\n      enabled: false,\n      delay: 3000,\n      waitForTransition: true,\n      disableOnInteraction: false,\n      stopOnLastSlide: false,\n      reverseDirection: false,\n      pauseOnMouseEnter: false\n    }\n  });\n  let timeout;\n  let raf;\n  let autoplayDelayTotal = params && params.autoplay ? params.autoplay.delay : 3000;\n  let autoplayDelayCurrent = params && params.autoplay ? params.autoplay.delay : 3000;\n  let autoplayTimeLeft;\n  let autoplayStartTime = new Date().getTime();\n  let wasPaused;\n  let isTouched;\n  let pausedByTouch;\n  let touchStartTimeout;\n  let slideChanged;\n  let pausedByInteraction;\n  let pausedByPointerEnter;\n\n  function onTransitionEnd(e) {\n    if (!swiper || swiper.destroyed || !swiper.wrapperEl) return;\n    if (e.target !== swiper.wrapperEl) return;\n    swiper.wrapperEl.removeEventListener('transitionend', onTransitionEnd);\n\n    if (pausedByPointerEnter || e.detail && e.detail.bySwiperTouchMove) {\n      return;\n    }\n\n    resume();\n  }\n\n  const calcTimeLeft = () => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n\n    if (swiper.autoplay.paused) {\n      wasPaused = true;\n    } else if (wasPaused) {\n      autoplayDelayCurrent = autoplayTimeLeft;\n      wasPaused = false;\n    }\n\n    const timeLeft = swiper.autoplay.paused ? autoplayTimeLeft : autoplayStartTime + autoplayDelayCurrent - new Date().getTime();\n    swiper.autoplay.timeLeft = timeLeft;\n    emit('autoplayTimeLeft', timeLeft, timeLeft / autoplayDelayTotal);\n    raf = requestAnimationFrame(() => {\n      calcTimeLeft();\n    });\n  };\n\n  const getSlideDelay = () => {\n    let activeSlideEl;\n\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      activeSlideEl = swiper.slides.filter(slideEl => slideEl.classList.contains('swiper-slide-active'))[0];\n    } else {\n      activeSlideEl = swiper.slides[swiper.activeIndex];\n    }\n\n    if (!activeSlideEl) return undefined;\n    const currentSlideDelay = parseInt(activeSlideEl.getAttribute('data-swiper-autoplay'), 10);\n    return currentSlideDelay;\n  };\n\n  const run = delayForce => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    cancelAnimationFrame(raf);\n    calcTimeLeft();\n    let delay = typeof delayForce === 'undefined' ? swiper.params.autoplay.delay : delayForce;\n    autoplayDelayTotal = swiper.params.autoplay.delay;\n    autoplayDelayCurrent = swiper.params.autoplay.delay;\n    const currentSlideDelay = getSlideDelay();\n\n    if (!Number.isNaN(currentSlideDelay) && currentSlideDelay > 0 && typeof delayForce === 'undefined') {\n      delay = currentSlideDelay;\n      autoplayDelayTotal = currentSlideDelay;\n      autoplayDelayCurrent = currentSlideDelay;\n    }\n\n    autoplayTimeLeft = delay;\n    const speed = swiper.params.speed;\n\n    const proceed = () => {\n      if (!swiper || swiper.destroyed) return;\n\n      if (swiper.params.autoplay.reverseDirection) {\n        if (!swiper.isBeginning || swiper.params.loop || swiper.params.rewind) {\n          swiper.slidePrev(speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          swiper.slideTo(swiper.slides.length - 1, speed, true, true);\n          emit('autoplay');\n        }\n      } else {\n        if (!swiper.isEnd || swiper.params.loop || swiper.params.rewind) {\n          swiper.slideNext(speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          swiper.slideTo(0, speed, true, true);\n          emit('autoplay');\n        }\n      }\n\n      if (swiper.params.cssMode) {\n        autoplayStartTime = new Date().getTime();\n        requestAnimationFrame(() => {\n          run();\n        });\n      }\n    };\n\n    if (delay > 0) {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        proceed();\n      }, delay);\n    } else {\n      requestAnimationFrame(() => {\n        proceed();\n      });\n    } // eslint-disable-next-line\n\n\n    return delay;\n  };\n\n  const start = () => {\n    autoplayStartTime = new Date().getTime();\n    swiper.autoplay.running = true;\n    run();\n    emit('autoplayStart');\n  };\n\n  const stop = () => {\n    swiper.autoplay.running = false;\n    clearTimeout(timeout);\n    cancelAnimationFrame(raf);\n    emit('autoplayStop');\n  };\n\n  const pause = (internal, reset) => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    clearTimeout(timeout);\n\n    if (!internal) {\n      pausedByInteraction = true;\n    }\n\n    const proceed = () => {\n      emit('autoplayPause');\n\n      if (swiper.params.autoplay.waitForTransition) {\n        swiper.wrapperEl.addEventListener('transitionend', onTransitionEnd);\n      } else {\n        resume();\n      }\n    };\n\n    swiper.autoplay.paused = true;\n\n    if (reset) {\n      if (slideChanged) {\n        autoplayTimeLeft = swiper.params.autoplay.delay;\n      }\n\n      slideChanged = false;\n      proceed();\n      return;\n    }\n\n    const delay = autoplayTimeLeft || swiper.params.autoplay.delay;\n    autoplayTimeLeft = delay - (new Date().getTime() - autoplayStartTime);\n    if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop) return;\n    if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;\n    proceed();\n  };\n\n  const resume = () => {\n    if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop || swiper.destroyed || !swiper.autoplay.running) return;\n    autoplayStartTime = new Date().getTime();\n\n    if (pausedByInteraction) {\n      pausedByInteraction = false;\n      run(autoplayTimeLeft);\n    } else {\n      run();\n    }\n\n    swiper.autoplay.paused = false;\n    emit('autoplayResume');\n  };\n\n  const onVisibilityChange = () => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    const document = getDocument();\n\n    if (document.visibilityState === 'hidden') {\n      pausedByInteraction = true;\n      pause(true);\n    }\n\n    if (document.visibilityState === 'visible') {\n      resume();\n    }\n  };\n\n  const onPointerEnter = e => {\n    if (e.pointerType !== 'mouse') return;\n    pausedByInteraction = true;\n    pausedByPointerEnter = true;\n    if (swiper.animating || swiper.autoplay.paused) return;\n    pause(true);\n  };\n\n  const onPointerLeave = e => {\n    if (e.pointerType !== 'mouse') return;\n    pausedByPointerEnter = false;\n\n    if (swiper.autoplay.paused) {\n      resume();\n    }\n  };\n\n  const attachMouseEvents = () => {\n    if (swiper.params.autoplay.pauseOnMouseEnter) {\n      swiper.el.addEventListener('pointerenter', onPointerEnter);\n      swiper.el.addEventListener('pointerleave', onPointerLeave);\n    }\n  };\n\n  const detachMouseEvents = () => {\n    if (swiper.el && typeof swiper.el !== 'string') {\n      swiper.el.removeEventListener('pointerenter', onPointerEnter);\n      swiper.el.removeEventListener('pointerleave', onPointerLeave);\n    }\n  };\n\n  const attachDocumentEvents = () => {\n    const document = getDocument();\n    document.addEventListener('visibilitychange', onVisibilityChange);\n  };\n\n  const detachDocumentEvents = () => {\n    const document = getDocument();\n    document.removeEventListener('visibilitychange', onVisibilityChange);\n  };\n\n  on('init', () => {\n    if (swiper.params.autoplay.enabled) {\n      attachMouseEvents();\n      attachDocumentEvents();\n      start();\n    }\n  });\n  on('destroy', () => {\n    detachMouseEvents();\n    detachDocumentEvents();\n\n    if (swiper.autoplay.running) {\n      stop();\n    }\n  });\n  on('_freeModeStaticRelease', () => {\n    if (pausedByTouch || pausedByInteraction) {\n      resume();\n    }\n  });\n  on('_freeModeNoMomentumRelease', () => {\n    if (!swiper.params.autoplay.disableOnInteraction) {\n      pause(true, true);\n    } else {\n      stop();\n    }\n  });\n  on('beforeTransitionStart', (_s, speed, internal) => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n\n    if (internal || !swiper.params.autoplay.disableOnInteraction) {\n      pause(true, true);\n    } else {\n      stop();\n    }\n  });\n  on('sliderFirstMove', () => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n\n    if (swiper.params.autoplay.disableOnInteraction) {\n      stop();\n      return;\n    }\n\n    isTouched = true;\n    pausedByTouch = false;\n    pausedByInteraction = false;\n    touchStartTimeout = setTimeout(() => {\n      pausedByInteraction = true;\n      pausedByTouch = true;\n      pause(true);\n    }, 200);\n  });\n  on('touchEnd', () => {\n    if (swiper.destroyed || !swiper.autoplay.running || !isTouched) return;\n    clearTimeout(touchStartTimeout);\n    clearTimeout(timeout);\n\n    if (swiper.params.autoplay.disableOnInteraction) {\n      pausedByTouch = false;\n      isTouched = false;\n      return;\n    }\n\n    if (pausedByTouch && swiper.params.cssMode) resume();\n    pausedByTouch = false;\n    isTouched = false;\n  });\n  on('slideChange', () => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    slideChanged = true;\n  });\n  Object.assign(swiper.autoplay, {\n    start,\n    stop,\n    pause,\n    resume\n  });\n}\n\nexport { Autoplay as default };","map":{"version":3,"sources":["/Users/damodhardattareddylikki/Desktop/Damodhar_portfolio/portfolio/node_modules/swiper/modules/autoplay.mjs"],"names":["g","getDocument","Autoplay","_ref","swiper","extendParams","on","emit","params","autoplay","running","paused","timeLeft","enabled","delay","waitForTransition","disableOnInteraction","stopOnLastSlide","reverseDirection","pauseOnMouseEnter","timeout","raf","autoplayDelayTotal","autoplayDelayCurrent","autoplayTimeLeft","autoplayStartTime","Date","getTime","wasPaused","isTouched","pausedByTouch","touchStartTimeout","slideChanged","pausedByInteraction","pausedByPointerEnter","onTransitionEnd","e","destroyed","wrapperEl","target","removeEventListener","detail","bySwiperTouchMove","resume","calcTimeLeft","requestAnimationFrame","getSlideDelay","activeSlideEl","virtual","slides","filter","slideEl","classList","contains","activeIndex","undefined","currentSlideDelay","parseInt","getAttribute","run","delayForce","cancelAnimationFrame","Number","isNaN","speed","proceed","isBeginning","loop","rewind","slidePrev","slideTo","length","isEnd","slideNext","cssMode","clearTimeout","setTimeout","start","stop","pause","internal","reset","addEventListener","onVisibilityChange","document","visibilityState","onPointerEnter","pointerType","animating","onPointerLeave","attachMouseEvents","el","detachMouseEvents","attachDocumentEvents","detachDocumentEvents","_s","Object","assign","default"],"mappings":"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","sourcesContent":["import { g as getDocument } from '../shared/ssr-window.esm.mjs';\n\n/* eslint no-underscore-dangle: \"off\" */\n/* eslint no-use-before-define: \"off\" */\nfunction Autoplay(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit,\n    params\n  } = _ref;\n  swiper.autoplay = {\n    running: false,\n    paused: false,\n    timeLeft: 0\n  };\n  extendParams({\n    autoplay: {\n      enabled: false,\n      delay: 3000,\n      waitForTransition: true,\n      disableOnInteraction: false,\n      stopOnLastSlide: false,\n      reverseDirection: false,\n      pauseOnMouseEnter: false\n    }\n  });\n  let timeout;\n  let raf;\n  let autoplayDelayTotal = params && params.autoplay ? params.autoplay.delay : 3000;\n  let autoplayDelayCurrent = params && params.autoplay ? params.autoplay.delay : 3000;\n  let autoplayTimeLeft;\n  let autoplayStartTime = new Date().getTime();\n  let wasPaused;\n  let isTouched;\n  let pausedByTouch;\n  let touchStartTimeout;\n  let slideChanged;\n  let pausedByInteraction;\n  let pausedByPointerEnter;\n  function onTransitionEnd(e) {\n    if (!swiper || swiper.destroyed || !swiper.wrapperEl) return;\n    if (e.target !== swiper.wrapperEl) return;\n    swiper.wrapperEl.removeEventListener('transitionend', onTransitionEnd);\n    if (pausedByPointerEnter || e.detail && e.detail.bySwiperTouchMove) {\n      return;\n    }\n    resume();\n  }\n  const calcTimeLeft = () => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    if (swiper.autoplay.paused) {\n      wasPaused = true;\n    } else if (wasPaused) {\n      autoplayDelayCurrent = autoplayTimeLeft;\n      wasPaused = false;\n    }\n    const timeLeft = swiper.autoplay.paused ? autoplayTimeLeft : autoplayStartTime + autoplayDelayCurrent - new Date().getTime();\n    swiper.autoplay.timeLeft = timeLeft;\n    emit('autoplayTimeLeft', timeLeft, timeLeft / autoplayDelayTotal);\n    raf = requestAnimationFrame(() => {\n      calcTimeLeft();\n    });\n  };\n  const getSlideDelay = () => {\n    let activeSlideEl;\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      activeSlideEl = swiper.slides.filter(slideEl => slideEl.classList.contains('swiper-slide-active'))[0];\n    } else {\n      activeSlideEl = swiper.slides[swiper.activeIndex];\n    }\n    if (!activeSlideEl) return undefined;\n    const currentSlideDelay = parseInt(activeSlideEl.getAttribute('data-swiper-autoplay'), 10);\n    return currentSlideDelay;\n  };\n  const run = delayForce => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    cancelAnimationFrame(raf);\n    calcTimeLeft();\n    let delay = typeof delayForce === 'undefined' ? swiper.params.autoplay.delay : delayForce;\n    autoplayDelayTotal = swiper.params.autoplay.delay;\n    autoplayDelayCurrent = swiper.params.autoplay.delay;\n    const currentSlideDelay = getSlideDelay();\n    if (!Number.isNaN(currentSlideDelay) && currentSlideDelay > 0 && typeof delayForce === 'undefined') {\n      delay = currentSlideDelay;\n      autoplayDelayTotal = currentSlideDelay;\n      autoplayDelayCurrent = currentSlideDelay;\n    }\n    autoplayTimeLeft = delay;\n    const speed = swiper.params.speed;\n    const proceed = () => {\n      if (!swiper || swiper.destroyed) return;\n      if (swiper.params.autoplay.reverseDirection) {\n        if (!swiper.isBeginning || swiper.params.loop || swiper.params.rewind) {\n          swiper.slidePrev(speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          swiper.slideTo(swiper.slides.length - 1, speed, true, true);\n          emit('autoplay');\n        }\n      } else {\n        if (!swiper.isEnd || swiper.params.loop || swiper.params.rewind) {\n          swiper.slideNext(speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          swiper.slideTo(0, speed, true, true);\n          emit('autoplay');\n        }\n      }\n      if (swiper.params.cssMode) {\n        autoplayStartTime = new Date().getTime();\n        requestAnimationFrame(() => {\n          run();\n        });\n      }\n    };\n    if (delay > 0) {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        proceed();\n      }, delay);\n    } else {\n      requestAnimationFrame(() => {\n        proceed();\n      });\n    }\n\n    // eslint-disable-next-line\n    return delay;\n  };\n  const start = () => {\n    autoplayStartTime = new Date().getTime();\n    swiper.autoplay.running = true;\n    run();\n    emit('autoplayStart');\n  };\n  const stop = () => {\n    swiper.autoplay.running = false;\n    clearTimeout(timeout);\n    cancelAnimationFrame(raf);\n    emit('autoplayStop');\n  };\n  const pause = (internal, reset) => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    clearTimeout(timeout);\n    if (!internal) {\n      pausedByInteraction = true;\n    }\n    const proceed = () => {\n      emit('autoplayPause');\n      if (swiper.params.autoplay.waitForTransition) {\n        swiper.wrapperEl.addEventListener('transitionend', onTransitionEnd);\n      } else {\n        resume();\n      }\n    };\n    swiper.autoplay.paused = true;\n    if (reset) {\n      if (slideChanged) {\n        autoplayTimeLeft = swiper.params.autoplay.delay;\n      }\n      slideChanged = false;\n      proceed();\n      return;\n    }\n    const delay = autoplayTimeLeft || swiper.params.autoplay.delay;\n    autoplayTimeLeft = delay - (new Date().getTime() - autoplayStartTime);\n    if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop) return;\n    if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;\n    proceed();\n  };\n  const resume = () => {\n    if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop || swiper.destroyed || !swiper.autoplay.running) return;\n    autoplayStartTime = new Date().getTime();\n    if (pausedByInteraction) {\n      pausedByInteraction = false;\n      run(autoplayTimeLeft);\n    } else {\n      run();\n    }\n    swiper.autoplay.paused = false;\n    emit('autoplayResume');\n  };\n  const onVisibilityChange = () => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    const document = getDocument();\n    if (document.visibilityState === 'hidden') {\n      pausedByInteraction = true;\n      pause(true);\n    }\n    if (document.visibilityState === 'visible') {\n      resume();\n    }\n  };\n  const onPointerEnter = e => {\n    if (e.pointerType !== 'mouse') return;\n    pausedByInteraction = true;\n    pausedByPointerEnter = true;\n    if (swiper.animating || swiper.autoplay.paused) return;\n    pause(true);\n  };\n  const onPointerLeave = e => {\n    if (e.pointerType !== 'mouse') return;\n    pausedByPointerEnter = false;\n    if (swiper.autoplay.paused) {\n      resume();\n    }\n  };\n  const attachMouseEvents = () => {\n    if (swiper.params.autoplay.pauseOnMouseEnter) {\n      swiper.el.addEventListener('pointerenter', onPointerEnter);\n      swiper.el.addEventListener('pointerleave', onPointerLeave);\n    }\n  };\n  const detachMouseEvents = () => {\n    if (swiper.el && typeof swiper.el !== 'string') {\n      swiper.el.removeEventListener('pointerenter', onPointerEnter);\n      swiper.el.removeEventListener('pointerleave', onPointerLeave);\n    }\n  };\n  const attachDocumentEvents = () => {\n    const document = getDocument();\n    document.addEventListener('visibilitychange', onVisibilityChange);\n  };\n  const detachDocumentEvents = () => {\n    const document = getDocument();\n    document.removeEventListener('visibilitychange', onVisibilityChange);\n  };\n  on('init', () => {\n    if (swiper.params.autoplay.enabled) {\n      attachMouseEvents();\n      attachDocumentEvents();\n      start();\n    }\n  });\n  on('destroy', () => {\n    detachMouseEvents();\n    detachDocumentEvents();\n    if (swiper.autoplay.running) {\n      stop();\n    }\n  });\n  on('_freeModeStaticRelease', () => {\n    if (pausedByTouch || pausedByInteraction) {\n      resume();\n    }\n  });\n  on('_freeModeNoMomentumRelease', () => {\n    if (!swiper.params.autoplay.disableOnInteraction) {\n      pause(true, true);\n    } else {\n      stop();\n    }\n  });\n  on('beforeTransitionStart', (_s, speed, internal) => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    if (internal || !swiper.params.autoplay.disableOnInteraction) {\n      pause(true, true);\n    } else {\n      stop();\n    }\n  });\n  on('sliderFirstMove', () => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    if (swiper.params.autoplay.disableOnInteraction) {\n      stop();\n      return;\n    }\n    isTouched = true;\n    pausedByTouch = false;\n    pausedByInteraction = false;\n    touchStartTimeout = setTimeout(() => {\n      pausedByInteraction = true;\n      pausedByTouch = true;\n      pause(true);\n    }, 200);\n  });\n  on('touchEnd', () => {\n    if (swiper.destroyed || !swiper.autoplay.running || !isTouched) return;\n    clearTimeout(touchStartTimeout);\n    clearTimeout(timeout);\n    if (swiper.params.autoplay.disableOnInteraction) {\n      pausedByTouch = false;\n      isTouched = false;\n      return;\n    }\n    if (pausedByTouch && swiper.params.cssMode) resume();\n    pausedByTouch = false;\n    isTouched = false;\n  });\n  on('slideChange', () => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    slideChanged = true;\n  });\n  Object.assign(swiper.autoplay, {\n    start,\n    stop,\n    pause,\n    resume\n  });\n}\n\nexport { Autoplay as default };\n"]},"metadata":{},"sourceType":"module"}