{"ast":null,"code":"import { c as createShadow } from '../shared/create-shadow.mjs';\nimport { e as effectInit } from '../shared/effect-init.mjs';\nimport { e as effectTarget } from '../shared/effect-target.mjs';\nimport { g as getSlideTransformEl, o as getRotateFix } from '../shared/utils.mjs';\n\nfunction EffectCoverflow(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    coverflowEffect: {\n      rotate: 50,\n      stretch: 0,\n      depth: 100,\n      scale: 1,\n      modifier: 1,\n      slideShadows: true\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      width: swiperWidth,\n      height: swiperHeight,\n      slides,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.coverflowEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const transform = swiper.translate;\n    const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\n    const rotate = isHorizontal ? params.rotate : -params.rotate;\n    const translate = params.depth;\n    const r = getRotateFix(swiper); // Each slide offset from center\n\n    for (let i = 0, length = slides.length; i < length; i += 1) {\n      const slideEl = slides[i];\n      const slideSize = slidesSizesGrid[i];\n      const slideOffset = slideEl.swiperSlideOffset;\n      const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;\n      const offsetMultiplier = typeof params.modifier === 'function' ? params.modifier(centerOffset) : centerOffset * params.modifier;\n      let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n      let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier; // var rotateZ = 0\n\n      let translateZ = -translate * Math.abs(offsetMultiplier);\n      let stretch = params.stretch; // Allow percentage to make a relative stretch for responsive sliders\n\n      if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {\n        stretch = parseFloat(params.stretch) / 100 * slideSize;\n      }\n\n      let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n      let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n      let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier); // Fix for ultra small values\n\n      if (Math.abs(translateX) < 0.001) translateX = 0;\n      if (Math.abs(translateY) < 0.001) translateY = 0;\n      if (Math.abs(translateZ) < 0.001) translateZ = 0;\n      if (Math.abs(rotateY) < 0.001) rotateY = 0;\n      if (Math.abs(rotateX) < 0.001) rotateX = 0;\n      if (Math.abs(scale) < 0.001) scale = 0;\n      const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${r(rotateX)}deg) rotateY(${r(rotateY)}deg) scale(${scale})`;\n      const targetEl = effectTarget(params, slideEl);\n      targetEl.style.transform = slideTransform;\n      slideEl.style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n\n      if (params.slideShadows) {\n        // Set shadows\n        let shadowBeforeEl = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');\n        let shadowAfterEl = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');\n\n        if (!shadowBeforeEl) {\n          shadowBeforeEl = createShadow('coverflow', slideEl, isHorizontal ? 'left' : 'top');\n        }\n\n        if (!shadowAfterEl) {\n          shadowAfterEl = createShadow('coverflow', slideEl, isHorizontal ? 'right' : 'bottom');\n        }\n\n        if (shadowBeforeEl) shadowBeforeEl.style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n        if (shadowAfterEl) shadowAfterEl.style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n      }\n    }\n  };\n\n  const setTransition = duration => {\n    const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\n    transformElements.forEach(el => {\n      el.style.transitionDuration = `${duration}ms`;\n      el.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => {\n        shadowEl.style.transitionDuration = `${duration}ms`;\n      });\n    });\n  };\n\n  effectInit({\n    effect: 'coverflow',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true\n    })\n  });\n}\n\nexport { EffectCoverflow as default };","map":{"version":3,"sources":["/Users/damodhardattareddylikki/Desktop/Damodhar_portfolio/portfolio/node_modules/swiper/modules/effect-coverflow.mjs"],"names":["c","createShadow","e","effectInit","effectTarget","g","getSlideTransformEl","o","getRotateFix","EffectCoverflow","_ref","swiper","extendParams","on","coverflowEffect","rotate","stretch","depth","scale","modifier","slideShadows","setTranslate","width","swiperWidth","height","swiperHeight","slides","slidesSizesGrid","params","isHorizontal","transform","translate","center","r","i","length","slideEl","slideSize","slideOffset","swiperSlideOffset","centerOffset","offsetMultiplier","rotateY","rotateX","translateZ","Math","abs","indexOf","parseFloat","translateY","translateX","slideTransform","targetEl","style","zIndex","round","shadowBeforeEl","querySelector","shadowAfterEl","opacity","setTransition","duration","transformElements","map","forEach","el","transitionDuration","querySelectorAll","shadowEl","effect","perspective","overwriteParams","watchSlidesProgress","default"],"mappings":"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","sourcesContent":["import { c as createShadow } from '../shared/create-shadow.mjs';\nimport { e as effectInit } from '../shared/effect-init.mjs';\nimport { e as effectTarget } from '../shared/effect-target.mjs';\nimport { g as getSlideTransformEl, o as getRotateFix } from '../shared/utils.mjs';\n\nfunction EffectCoverflow(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    coverflowEffect: {\n      rotate: 50,\n      stretch: 0,\n      depth: 100,\n      scale: 1,\n      modifier: 1,\n      slideShadows: true\n    }\n  });\n  const setTranslate = () => {\n    const {\n      width: swiperWidth,\n      height: swiperHeight,\n      slides,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.coverflowEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const transform = swiper.translate;\n    const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\n    const rotate = isHorizontal ? params.rotate : -params.rotate;\n    const translate = params.depth;\n    const r = getRotateFix(swiper);\n    // Each slide offset from center\n    for (let i = 0, length = slides.length; i < length; i += 1) {\n      const slideEl = slides[i];\n      const slideSize = slidesSizesGrid[i];\n      const slideOffset = slideEl.swiperSlideOffset;\n      const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;\n      const offsetMultiplier = typeof params.modifier === 'function' ? params.modifier(centerOffset) : centerOffset * params.modifier;\n      let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n      let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;\n      // var rotateZ = 0\n      let translateZ = -translate * Math.abs(offsetMultiplier);\n      let stretch = params.stretch;\n      // Allow percentage to make a relative stretch for responsive sliders\n      if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {\n        stretch = parseFloat(params.stretch) / 100 * slideSize;\n      }\n      let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n      let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n      let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier);\n\n      // Fix for ultra small values\n      if (Math.abs(translateX) < 0.001) translateX = 0;\n      if (Math.abs(translateY) < 0.001) translateY = 0;\n      if (Math.abs(translateZ) < 0.001) translateZ = 0;\n      if (Math.abs(rotateY) < 0.001) rotateY = 0;\n      if (Math.abs(rotateX) < 0.001) rotateX = 0;\n      if (Math.abs(scale) < 0.001) scale = 0;\n      const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${r(rotateX)}deg) rotateY(${r(rotateY)}deg) scale(${scale})`;\n      const targetEl = effectTarget(params, slideEl);\n      targetEl.style.transform = slideTransform;\n      slideEl.style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n      if (params.slideShadows) {\n        // Set shadows\n        let shadowBeforeEl = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');\n        let shadowAfterEl = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');\n        if (!shadowBeforeEl) {\n          shadowBeforeEl = createShadow('coverflow', slideEl, isHorizontal ? 'left' : 'top');\n        }\n        if (!shadowAfterEl) {\n          shadowAfterEl = createShadow('coverflow', slideEl, isHorizontal ? 'right' : 'bottom');\n        }\n        if (shadowBeforeEl) shadowBeforeEl.style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n        if (shadowAfterEl) shadowAfterEl.style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n      }\n    }\n  };\n  const setTransition = duration => {\n    const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\n    transformElements.forEach(el => {\n      el.style.transitionDuration = `${duration}ms`;\n      el.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => {\n        shadowEl.style.transitionDuration = `${duration}ms`;\n      });\n    });\n  };\n  effectInit({\n    effect: 'coverflow',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true\n    })\n  });\n}\n\nexport { EffectCoverflow as default };\n"]},"metadata":{},"sourceType":"module"}