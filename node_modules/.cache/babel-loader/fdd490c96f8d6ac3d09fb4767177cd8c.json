{"ast":null,"code":"import { supportsScrollTimeline } from '../render/dom/scroll/supports.mjs';\n\nclass GroupPlaybackControls {\n  constructor(animations) {\n    // Bound to accomodate common `return animation.stop` pattern\n    this.stop = () => this.runAll(\"stop\");\n\n    this.animations = animations.filter(Boolean);\n  }\n\n  then(onResolve, onReject) {\n    return Promise.all(this.animations).then(onResolve).catch(onReject);\n  }\n  /**\n   * TODO: Filter out cancelled or stopped animations before returning\n   */\n\n\n  getAll(propName) {\n    return this.animations[0][propName];\n  }\n\n  setAll(propName, newValue) {\n    for (let i = 0; i < this.animations.length; i++) {\n      this.animations[i][propName] = newValue;\n    }\n  }\n\n  attachTimeline(timeline, fallback) {\n    const subscriptions = this.animations.map(animation => {\n      if (supportsScrollTimeline() && animation.attachTimeline) {\n        return animation.attachTimeline(timeline);\n      } else {\n        return fallback(animation);\n      }\n    });\n    return () => {\n      subscriptions.forEach((cancel, i) => {\n        cancel && cancel();\n        this.animations[i].stop();\n      });\n    };\n  }\n\n  get time() {\n    return this.getAll(\"time\");\n  }\n\n  set time(time) {\n    this.setAll(\"time\", time);\n  }\n\n  get speed() {\n    return this.getAll(\"speed\");\n  }\n\n  set speed(speed) {\n    this.setAll(\"speed\", speed);\n  }\n\n  get startTime() {\n    return this.getAll(\"startTime\");\n  }\n\n  get duration() {\n    let max = 0;\n\n    for (let i = 0; i < this.animations.length; i++) {\n      max = Math.max(max, this.animations[i].duration);\n    }\n\n    return max;\n  }\n\n  runAll(methodName) {\n    this.animations.forEach(controls => controls[methodName]());\n  }\n\n  flatten() {\n    this.runAll(\"flatten\");\n  }\n\n  play() {\n    this.runAll(\"play\");\n  }\n\n  pause() {\n    this.runAll(\"pause\");\n  }\n\n  cancel() {\n    this.runAll(\"cancel\");\n  }\n\n  complete() {\n    this.runAll(\"complete\");\n  }\n\n}\n\nexport { GroupPlaybackControls };","map":{"version":3,"sources":["/Users/damodhardattareddylikki/Desktop/Damodhar_portfolio/portfolio/node_modules/framer-motion/dist/es/animation/GroupPlaybackControls.mjs"],"names":["supportsScrollTimeline","GroupPlaybackControls","constructor","animations","stop","runAll","filter","Boolean","then","onResolve","onReject","Promise","all","catch","getAll","propName","setAll","newValue","i","length","attachTimeline","timeline","fallback","subscriptions","map","animation","forEach","cancel","time","speed","startTime","duration","max","Math","methodName","controls","flatten","play","pause","complete"],"mappings":"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","sourcesContent":["import { supportsScrollTimeline } from '../render/dom/scroll/supports.mjs';\n\nclass GroupPlaybackControls {\n    constructor(animations) {\n        // Bound to accomodate common `return animation.stop` pattern\n        this.stop = () => this.runAll(\"stop\");\n        this.animations = animations.filter(Boolean);\n    }\n    then(onResolve, onReject) {\n        return Promise.all(this.animations).then(onResolve).catch(onReject);\n    }\n    /**\n     * TODO: Filter out cancelled or stopped animations before returning\n     */\n    getAll(propName) {\n        return this.animations[0][propName];\n    }\n    setAll(propName, newValue) {\n        for (let i = 0; i < this.animations.length; i++) {\n            this.animations[i][propName] = newValue;\n        }\n    }\n    attachTimeline(timeline, fallback) {\n        const subscriptions = this.animations.map((animation) => {\n            if (supportsScrollTimeline() && animation.attachTimeline) {\n                return animation.attachTimeline(timeline);\n            }\n            else {\n                return fallback(animation);\n            }\n        });\n        return () => {\n            subscriptions.forEach((cancel, i) => {\n                cancel && cancel();\n                this.animations[i].stop();\n            });\n        };\n    }\n    get time() {\n        return this.getAll(\"time\");\n    }\n    set time(time) {\n        this.setAll(\"time\", time);\n    }\n    get speed() {\n        return this.getAll(\"speed\");\n    }\n    set speed(speed) {\n        this.setAll(\"speed\", speed);\n    }\n    get startTime() {\n        return this.getAll(\"startTime\");\n    }\n    get duration() {\n        let max = 0;\n        for (let i = 0; i < this.animations.length; i++) {\n            max = Math.max(max, this.animations[i].duration);\n        }\n        return max;\n    }\n    runAll(methodName) {\n        this.animations.forEach((controls) => controls[methodName]());\n    }\n    flatten() {\n        this.runAll(\"flatten\");\n    }\n    play() {\n        this.runAll(\"play\");\n    }\n    pause() {\n        this.runAll(\"pause\");\n    }\n    cancel() {\n        this.runAll(\"cancel\");\n    }\n    complete() {\n        this.runAll(\"complete\");\n    }\n}\n\nexport { GroupPlaybackControls };\n"]},"metadata":{},"sourceType":"module"}